//Author -- Hitendra Singh Rathore

var app = angular.module("app", []);




app.controller("bookingCtrl", function($http, $scope) {
    var b = this;
    b.seats = [];
    b.seatsAllocated = []; // Choosen seats for the user 

    b.numberOfSeats = ""; //Number of seats user wants to book
    b.message = {}
    b.loading = false;

    /*
    Description: Function to get the array of all seats from the database.
    Input: none
    Output: assigns the seat list to b.seats
    */
    b.getSeats = function() {
        b.loading = true;
        $http.get("https://tck-booking.herokuapp.com/seats").then(function(response) {
            b.seats = response.data.data;
            b.loading = false;

        }, function(error) {
            console.log(error);
        })
    }

    /*
    Description: Utility function to get the number of available seats in the coach.
    Input: none
    Output: returns the number of available seats.
    */
    var getAvailableSeatCount = function() {
            $http.get("https://tck-booking.herokuapp.com/seats/seatCount").then(function(response) {
                return response.count;
            }, function(error) {
                console.log("Error")
            })
        }
        /*
        Description: Utility function to get a matrix having value 0 for booked seats and 1 for available seats.
        Input: none
        Output: returns the matrix of seats.
        */
    var fillInMatrix = function() {
        let matrix = new Array(21).fill().map(() => new Array(7).fill(0));
        for (var i = 0; i < b.seats.length; i++) {
            if (b.seats[i].status == "available") {
                matrix[b.seats[i].row - 1][b.seats[i].column - 1] = 1;
            } else {
                matrix[b.seats[i].row - 1][b.seats[i].column - 1] = 0;
            }
        }
        return matrix;
    };

    /*
    Description: Function to populate the seat matrix as generated by fillInMatrix() by counting the number of seats
                available in any given column.
    Input: matrix of 1's and 0's where 1 is a seat available and 0 is a booked seat.
    Output: Matrix where the value of [i][j] is the number of consecutive available seats in column j starting 
            from row i.
        -->
            if input matrix is 
             1   1   1   1   0   1
             1   0   1   1   1   0    
             1   1   1    0   1  0
            Output will be
             3   1    3   2   0   1
             2   0    2   1   2   0
             1   1    1   0   1   0
    */
    var populateMatrix = function(matrix) {
        let flag = 1;
        for (var j = 0; j <= 6; j++) {
            flag = 1;
            for (var i = 20; i >= 0; i--) {

                if (matrix[i][j] == 1) {
                    matrix[i][j] = flag;
                    flag = flag + 1;
                } else if (matrix[i][j] == 0)
                    flag = 1;

            }
        }
        return matrix;
    };

    /*
    Description: Function to search for nearby seats using the matrix provided.
    Input: Matrix from populateMatrix, number of rows to fit seats in (initially one)
            , number of seats to allocate.
    Output: Array of allocated seats numbers.
    */
    var fillSeats = function(matrix, rows, seats) {
        let seatsAllocated = [];
        let sum = 0;
        for (let row = 0; row < 21; row++) {
            sum = 0;
            seatsAllocated = [];
            for (let col = 0; col < 7; col++) {
                if (matrix[row][col] == 0) {
                    sum = 0;
                    seatsAllocated = [];
                } else {
                    sum += matrix[row][col] > rows ? rows : matrix[row][col];
                    for (let rowDown = 0; rowDown < rows; rowDown++) {

                        let seatNumber = (row + rowDown) * 7 + (col + 1);
                        seatsAllocated.push(seatNumber);
                        if (seatsAllocated.length == seats)
                            return seatsAllocated;
                    }
                    if (sum >= seats)
                        return seatsAllocated;
                }

            }
        }
        if (seatsAllocated.length < seats)
            return [];
    };

    /*
    Description: Fallback function to just pick seats in the order they are present.
    Input: matrix from function pupulateMatrix(), and number of seats.
    Output: returns array of selected seat numbers.
    */
    var justPickSeats = function(matrix, seats) {
        let seatsAllocated = [];
        for (let row = 0; row < 21; row++) {
            for (let col = 0; col < 7; col++) {
                if (matrix[row][col] == 1) {
                    let seatNumber = (row) * 7 + (col + 1);
                    seatsAllocated.push(seatNumber);
                    if (seatsAllocated.length == seats)
                        return seatsAllocated;
                }
            }
        }
        if (seatsAllocated.length < seats)
            return [];

    };



    var bestFit = function(matrix, seats) {

            var seatsAllocated = [];
            var seat = 0;
            var emptySeats = 0;


            for (var i = 0; i < 21; i++) {
                seatsAllocated = []
                emptySeats = 0;
                for (var j = 0; j < 7; j++) {
                    if (matrix[i][j] != 0) {
                        emptySeats = emptySeats + 1;
                        seat = (i * 7) + (j + 1);
                        seatsAllocated.push(seat);



                    } else {

                        if (emptySeats == seats)
                            return seatsAllocated;

                        emptySeats = 0;
                        seatsAllocated = [];

                    }

                }
                if (emptySeats == seats)
                    return seatsAllocated;
            }
            return seatsAllocated;
        }
        /*
        Description: Calling fillSeats() with increasing rows, and call a fallback function in last case.
        Input: number of seats
        Output: returns array of selected seat numbers.
        */
    var getSeats = function(seats) {
            let matrix = populateMatrix(fillInMatrix());
            let seatsAllocated = [];

            seatsAllocated = bestFit(matrix, seats);
            if (seatsAllocated.length == seats)
                return seatsAllocated;
            else {
                seatsAllocated = [];

                for (let rows = 1; rows <= seats; rows++) {

                    seatsAllocated = fillSeats(matrix, rows, seats);
                    if (seatsAllocated.length == seats) {
                        break;
                    }

                }
                if (seatsAllocated.length == 0)
                    seatsAllocated = justPickSeats(matrix, seats);

                return seatsAllocated;
            }

        }
        /*
    Description: Getting the seats for the user when button is clicked.
    Input: none
    Output: populates the variable array for allocatedSeats
    */
    b.findSeats = function() {
        b.seatsAllocated = [];
        if (Number.isInteger(b.numberOfSeats) == false) {
            b.message = {
                status: "error",
                message: "Please enter a Valid number"
            }
        } else if (b.numberOfSeats <= 0 || b.numberOfSeats > 7) {
            b.message = {
                status: "error",
                message: "Please enter a number in between 1 to 7"
            }
        } else {
            b.loading = true;
            if (b.numberOfSeats > getAvailableSeatCount()) {
                b.message = {
                    status: "error",
                    message: "Not Enough Seats"
                }
                b.loading = false;
            } else {
                b.message = {};
                b.seatsAllocated = getSeats(b.numberOfSeats);
                b.loading = false;
            }

        }

    }

    /*
    Description: Calls the database to book the choosen seats when use clicks confirm.
    Input: Calls when user clicks on confirm.
    Output: calls the getSeats() to get the updated seats.
    */
    b.bookSeats = function() {

        $http.put("https://tck-booking.herokuapp.com/seats/bookSeats", { "seatsAllocated": b.seatsAllocated }).then(function(response) {
            b.message = {};
            b.numberOfSeats = "";
            b.seatsAllocated = [];

            b.getSeats();
        }, function(error) {

        })
    };

    b.resetSeats = function() {

        $http.put("https://tck-booking.herokuapp.com/seats/resetSeats").then(function(response) {
            b.getSeats();
        }, function(error) {
            console.log(error);
        })
    }
})
